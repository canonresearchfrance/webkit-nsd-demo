/* This file has been automatically generated by geneet.py */
/*                      DO NOT MODIFY                      */

#ifndef __EVE_STATE_H__
#define __EVE_STATE_H__

#include <Eina.h>
#include <Eet.h>
#include <Evas.h>

typedef struct _Config Config;
typedef struct _Hist_Item Hist_Item;
typedef struct _Hist Hist;
typedef struct _Fav_Item Fav_Item;
typedef struct _Fav Fav;
typedef struct _Session_Item Session_Item;
typedef struct _Session_Window Session_Window;
typedef struct _Session Session;
typedef struct _Services Services;
typedef struct _Device Device;
typedef struct _Network_Origin Network_Origin;
typedef struct _Network Network;

/* Config */
Config *config_new(unsigned char allow_popup, unsigned char enable_auto_load_images, unsigned char enable_auto_shrink_images, unsigned char enable_javascript, unsigned char enable_mouse_cursor, unsigned char enable_plugins, unsigned char enable_private_mode, unsigned char enable_touch_interface, unsigned char enable_auto_network_access, const char * home_page, const char * proxy, unsigned char restore_state, const char * user_agent, unsigned char frame_flattening, int text_zoom, int minimum_font_size, int cookie_policy, int backing_store);
void config_free(Config *config);

void config_allow_popup_set(Config *config, unsigned char allow_popup);
unsigned char config_allow_popup_get(const Config *config);
void config_enable_auto_load_images_set(Config *config, unsigned char enable_auto_load_images);
unsigned char config_enable_auto_load_images_get(const Config *config);
void config_enable_auto_shrink_images_set(Config *config, unsigned char enable_auto_shrink_images);
unsigned char config_enable_auto_shrink_images_get(const Config *config);
void config_enable_javascript_set(Config *config, unsigned char enable_javascript);
unsigned char config_enable_javascript_get(const Config *config);
void config_enable_mouse_cursor_set(Config *config, unsigned char enable_mouse_cursor);
unsigned char config_enable_mouse_cursor_get(const Config *config);
void config_enable_plugins_set(Config *config, unsigned char enable_plugins);
unsigned char config_enable_plugins_get(const Config *config);
void config_enable_private_mode_set(Config *config, unsigned char enable_private_mode);
unsigned char config_enable_private_mode_get(const Config *config);
void config_enable_touch_interface_set(Config *config, unsigned char enable_touch_interface);
unsigned char config_enable_touch_interface_get(const Config *config);
void config_enable_auto_network_access_set(Config *config, unsigned char enable_auto_network_access);
unsigned char config_enable_auto_network_access_get(const Config *config);
void config_home_page_set(Config *config, const char * home_page);
const char * config_home_page_get(const Config *config);
void config_proxy_set(Config *config, const char * proxy);
const char * config_proxy_get(const Config *config);
void config_restore_state_set(Config *config, unsigned char restore_state);
unsigned char config_restore_state_get(const Config *config);
void config_user_agent_set(Config *config, const char * user_agent);
const char * config_user_agent_get(const Config *config);
void config_frame_flattening_set(Config *config, unsigned char frame_flattening);
unsigned char config_frame_flattening_get(const Config *config);
void config_text_zoom_set(Config *config, int text_zoom);
int config_text_zoom_get(const Config *config);
void config_minimum_font_size_set(Config *config, int minimum_font_size);
int config_minimum_font_size_get(const Config *config);
void config_cookie_policy_set(Config *config, int cookie_policy);
int config_cookie_policy_get(const Config *config);
void config_backing_store_set(Config *config, int backing_store);
int config_backing_store_get(const Config *config);

Config *config_load(const char *filename);
Eina_Bool config_save(Config *config, const char *filename);

/* Hist_Item */
Hist_Item *hist_item_new(const char * title, const char * url, unsigned int visit_count, double last_visit);
void hist_item_free(Hist_Item *hist_item);

void hist_item_title_set(Hist_Item *hist_item, const char * title);
const char * hist_item_title_get(const Hist_Item *hist_item);
void hist_item_url_set(Hist_Item *hist_item, const char * url);
const char * hist_item_url_get(const Hist_Item *hist_item);
void hist_item_visit_count_set(Hist_Item *hist_item, unsigned int visit_count);
unsigned int hist_item_visit_count_get(const Hist_Item *hist_item);
void hist_item_last_visit_set(Hist_Item *hist_item, double last_visit);
double hist_item_last_visit_get(const Hist_Item *hist_item);

/* Hist */
Hist *hist_new();
void hist_free(Hist *hist);

void hist_items_add(Hist *hist, const char * url, Hist_Item *hist_item);
void hist_items_del(Hist *hist, const char * url);
Hist_Item *hist_items_get(const Hist *hist, const char * key);
Eina_Hash *hist_items_hash_get(const Hist *hist);
void hist_items_modify(Hist *hist, const char * key, void *value);

Hist *hist_load(const char *filename);
Eina_Bool hist_save(Hist *hist, const char *filename);

/* Fav_Item */
Fav_Item *fav_item_new(const char * url, const char * title, unsigned int visit_count);
void fav_item_free(Fav_Item *fav_item);

void fav_item_url_set(Fav_Item *fav_item, const char * url);
const char * fav_item_url_get(const Fav_Item *fav_item);
void fav_item_title_set(Fav_Item *fav_item, const char * title);
const char * fav_item_title_get(const Fav_Item *fav_item);
void fav_item_visit_count_set(Fav_Item *fav_item, unsigned int visit_count);
unsigned int fav_item_visit_count_get(const Fav_Item *fav_item);

/* Fav */
Fav *fav_new();
void fav_free(Fav *fav);

void fav_items_add(Fav *fav, const char * url, Fav_Item *fav_item);
void fav_items_del(Fav *fav, const char * url);
Fav_Item *fav_items_get(const Fav *fav, const char * key);
Eina_Hash *fav_items_hash_get(const Fav *fav);
void fav_items_modify(Fav *fav, const char * key, void *value);

Fav *fav_load(const char *filename);
Eina_Bool fav_save(Fav *fav, const char *filename);

/* Session_Item */
Session_Item *session_item_new(const char * url, unsigned char focused, int scroll_x, int scroll_y);
void session_item_free(Session_Item *session_item);

void session_item_url_set(Session_Item *session_item, const char * url);
const char * session_item_url_get(const Session_Item *session_item);
void session_item_focused_set(Session_Item *session_item, unsigned char focused);
unsigned char session_item_focused_get(const Session_Item *session_item);
void session_item_scroll_x_set(Session_Item *session_item, int scroll_x);
int session_item_scroll_x_get(const Session_Item *session_item);
void session_item_scroll_y_set(Session_Item *session_item, int scroll_y);
int session_item_scroll_y_get(const Session_Item *session_item);

/* Session_Window */
Session_Window *session_window_new(Eina_List * tabs, unsigned char focused);
void session_window_free(Session_Window *session_window);

void session_window_tabs_add(Session_Window *session_window, Session_Item *session_item);
void session_window_tabs_del(Session_Window *session_window, Session_Item *session_item);
Session_Item *session_window_tabs_get(const Session_Window *session_window, unsigned int nth);
unsigned int session_window_tabs_count(const Session_Window *session_window);
Eina_List *session_window_tabs_list_get(const Session_Window *session_window);
void session_window_tabs_list_clear(Session_Window *session_window);
void session_window_tabs_list_set(Session_Window *session_window, Eina_List *list);
void session_window_focused_set(Session_Window *session_window, unsigned char focused);
unsigned char session_window_focused_get(const Session_Window *session_window);

/* Session */
Session *session_new(Eina_List * windows);
void session_free(Session *session);

void session_windows_add(Session *session, Session_Window *session_window);
void session_windows_del(Session *session, Session_Window *session_window);
Session_Window *session_windows_get(const Session *session, unsigned int nth);
unsigned int session_windows_count(const Session *session);
Eina_List *session_windows_list_get(const Session *session);
void session_windows_list_clear(Session *session);
void session_windows_list_set(Session *session, Eina_List *list);

Session *session_load(const char *filename);
Eina_Bool session_save(Session *session, const char *filename);

/* Services */
Services *services_new(const char * id, const char * model, const char * types, Evas_Object * icon, unsigned char allowed);
void services_free(Services *services);

void services_id_set(Services *services, const char * id);
const char * services_id_get(const Services *services);
void services_model_set(Services *services, const char * model);
const char * services_model_get(const Services *services);
void services_types_set(Services *services, const char * types);
const char * services_types_get(const Services *services);
void services_icon_set(Services *services, Evas_Object *icon);
Evas_Object *services_icon_get(Services *services, Evas *evas, const char *eet_file);
void services_allowed_set(Services *services, unsigned char allowed);
unsigned char services_allowed_get(const Services *services);

/* Device */
Device *device_new(const char * url, const char * friendly_name, Evas_Object * icon, unsigned char allowed);
void device_free(Device *device);

void device_url_set(Device *device, const char * url);
const char * device_url_get(const Device *device);
void device_friendly_name_set(Device *device, const char * friendly_name);
const char * device_friendly_name_get(const Device *device);
void device_icon_set(Device *device, Evas_Object *icon);
Evas_Object *device_icon_get(Device *device, Evas *evas, const char *eet_file);
void device_allowed_set(Device *device, unsigned char allowed);
unsigned char device_allowed_get(const Device *device);
void device_services_add(Device *device, const char * id, Services *services);
void device_services_del(Device *device, const char * id);
Services *device_services_get(const Device *device, const char * key);
Eina_Hash *device_services_hash_get(const Device *device);
void device_services_modify(Device *device, const char * key, void *value);

/* Network_Origin */
Network_Origin *network_origin_new(const char * origin, Eina_List * devices);
void network_origin_free(Network_Origin *network_origin);

void network_origin_origin_set(Network_Origin *network_origin, const char * origin);
const char * network_origin_origin_get(const Network_Origin *network_origin);
void network_origin_devices_add(Network_Origin *network_origin, Device *device);
void network_origin_devices_del(Network_Origin *network_origin, Device *device);
Device *network_origin_devices_get(const Network_Origin *network_origin, unsigned int nth);
unsigned int network_origin_devices_count(const Network_Origin *network_origin);
Eina_List *network_origin_devices_list_get(const Network_Origin *network_origin);
void network_origin_devices_list_clear(Network_Origin *network_origin);
void network_origin_devices_list_set(Network_Origin *network_origin, Eina_List *list);
void network_origin_services_add(Network_Origin *network_origin, const char * id, Services *services);
void network_origin_services_del(Network_Origin *network_origin, const char * id);
Services *network_origin_services_get(const Network_Origin *network_origin, const char * key);
Eina_Hash *network_origin_services_hash_get(const Network_Origin *network_origin);
void network_origin_services_modify(Network_Origin *network_origin, const char * key, void *value);


/* Network */
Network *network_new(Eina_List * origins);
void network_free(Network *network);

void network_origins_add(Network *network, Network_Origin *network_origin);
void network_origins_del(Network *network, Network_Origin *network_origin);
Network_Origin *network_origins_get(const Network *network, unsigned int nth);
unsigned int network_origins_count(const Network *network);
Eina_List *network_origins_list_get(const Network *network);
void network_origins_list_clear(Network *network);
void network_origins_list_set(Network *network, Eina_List *list);

Network *network_load(const char *filename);
Eina_Bool network_save(Network *network, const char *filename);

/* Global initializer / shutdown functions */
void eve_state_init(void);
void eve_state_shutdown(void);

#endif /* __EVE_STATE_H__ */
